{"version":3,"sources":["store/todos/slice.ts","components/todo-list/add-todo/index.tsx","components/todo-list/todo-item/index.tsx","components/todo-list/index.tsx","components/app/routes.ts","components/app/index.tsx","serviceWorker.ts","store/index.ts","index.tsx"],"names":["todosSlice","createSlice","name","initialState","reducers","addTodo","state","action","concat","payload","changeTodoStatus","map","todo","id","done","removeTodo","removed","reviveTodo","deleteTodo","filter","todosReducer","reducer","actions","AddTodo","useForm","register","handleSubmit","setValue","errors","dispatch","useDispatch","onSubmit","content","v4","htmlFor","type","ref","required","value","message","TodoItem","checked","onClick","TodoList","todos","location","useLocation","length","pathname","sort","a","b","key","App","useSelector","to","exact","path","component","Boolean","window","hostname","match","rootReducer","combineReducers","store","configureStore","history","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"kQAGMA,EAAaC,YAAY,CAC7BC,KAAM,QACNC,aAAc,GACdC,SAAU,CACRC,QAAS,SAACC,EAAOC,GAAR,OACPD,EAAME,OAAOD,EAAOE,UACtBC,iBAAkB,SAACJ,EAAOC,GAAR,OAChBD,EAAMK,KAAI,SAAAC,GAAI,OACZA,EAAKC,KAAON,EAAOE,QAAnB,2BAAkCG,GAAlC,IAAwCE,MAAOF,EAAKE,OAASF,MAEjEG,WAAY,SAACT,EAAOC,GAAR,OACVD,EAAMK,KAAI,SAAAC,GAAI,OACZA,EAAKC,KAAON,EAAOE,QAAnB,2BAAkCG,GAAlC,IAAwCI,SAAS,IAASJ,MAE9DK,WAAY,SAACX,EAAOC,GAAR,OACVD,EAAMK,KAAI,SAAAC,GAAI,OACZA,EAAKC,KAAON,EAAOE,QAAnB,2BACSG,GADT,IACeE,MAAM,EAAOE,SAAS,IACjCJ,MAERM,WAAY,SAACZ,EAAOC,GAAR,OACVD,EAAMa,QAAO,SAAAP,GAAI,OAAIA,EAAKC,KAAON,EAAOE,eAKnCW,EAEPpB,EAFFqB,Q,EAEErB,EADFsB,QAAWjB,E,EAAAA,QAASK,E,EAAAA,iBAAkBK,E,EAAAA,WAAYE,E,EAAAA,WAAYC,E,EAAAA,WCtBzD,SAASK,IAAW,IAAD,EAC6BC,cAA7CC,EADgB,EAChBA,SAAUC,EADM,EACNA,aAAcC,EADR,EACQA,SAAUC,EADlB,EACkBA,OACpCC,EAAWC,cACjB,OACE,oCACE,wCACA,0BACEC,SAAUL,GAAa,YAA6B,IAA1BM,EAAyB,EAAzBA,QACxBL,EAAS,UAAW,IACpBE,EAASxB,EAAQ,CAAE2B,UAASlB,MAAM,EAAOE,SAAS,EAAOH,GAAIoB,qBAG/D,2BAAOC,QAAQ,WAAf,WACA,2BACEC,KAAK,OACLjC,KAAK,UACLkC,IAAKX,EAAS,CACZY,SAAU,CAAEC,OAAO,EAAMC,QAAS,+BAGrCX,EAAOI,SAAW,8BAAOJ,EAAOI,QAAQO,W,WCf1C,SAASC,EAAT,GAEY,IAAD,IADhB5B,KAAQE,EACQ,EADRA,KAAMkB,EACE,EADFA,QAAShB,EACP,EADOA,QAASH,EAChB,EADgBA,GAE1BgB,EAAWC,cACjB,OACE,qCACId,GACA,2BACEmB,KAAK,WACLM,QAAS3B,EACT4B,QAAS,kBAAMb,EAASnB,EAAiBG,OAG7C,8BAAOmB,GACNhB,GACC,oCACE,4BAAQ0B,QAAS,kBAAMb,EAASZ,EAAWJ,MAA3C,UACA,4BAAQ6B,QAAS,kBAAMb,EAASX,EAAWL,MAA3C,Y,WClBH,SAAS8B,EAAT,GAA6C,IAAzBC,EAAwB,EAAxBA,MACnBC,EAAWC,cACXjB,EAAWC,cAKjB,OACE,oCACE,qCACCc,EAAMG,OAAS,GCrBI,MDqBCF,EAASG,UAC5B,4BAAQN,QARU,WACtBE,EAAMzB,QAAO,SAAAP,GAAI,OAAIA,EAAKE,QAAMH,KAAI,SAAAC,GAAI,OAAIiB,EAASd,EAAWH,EAAKC,UAOjE,oBAED,YAAI+B,GACFK,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEpC,KAAO,EAAIqC,EAAErC,MAAQ,EAAI,KAC3CH,KAAI,SAAAC,GAAI,OACP,kBAAC4B,EAAD,CAAU5B,KAAMA,EAAMwC,IAAKxC,EAAKC,S,YEF3BwC,MAjBf,WACE,IAAMR,EAAWC,cACXF,EAAQU,aAA2B,SAAAhD,GAAK,OAC5CA,EAAMsC,MAAMzB,QAAO,SAAAP,GAAI,MDZE,aCavBiC,EAASG,SAA6BpC,EAAKI,SAAWJ,EAAKI,cAG/D,OACE,oCACE,kBAAC,IAAD,CAAMuC,GDjBc,KCiBpB,aACA,kBAAC,IAAD,CAAMA,GDnBiB,YCmBvB,cACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KDnBO,ICmBWC,UAAWnC,IAC1C,kBAACoB,EAAD,CAAUC,MAAOA,MCTHe,QACW,cAA7BC,OAAOf,SAASgB,UAEe,UAA7BD,OAAOf,SAASgB,UAEhBD,OAAOf,SAASgB,SAASC,MACvB,2D,mBCdAC,EAAcC,YAAgB,CAClCpB,MAAOxB,IAII6C,EAAQC,YAAe,CAClC7C,QAAS0C,IAGEI,EAAUC,cCJvBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,IAAD,CAAQE,QAASA,GACf,kBAAC,EAAD,SAINK,SAASC,eAAe,SF0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM1C,c","file":"static/js/main.8de724a7.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Todo, TodoId } from \"./type\";\n\nconst todosSlice = createSlice({\n  name: \"todos\",\n  initialState: [] as Todo[],\n  reducers: {\n    addTodo: (state, action: PayloadAction<Todo>) =>\n      state.concat(action.payload),\n    changeTodoStatus: (state, action: PayloadAction<TodoId>) =>\n      state.map(todo =>\n        todo.id === action.payload ? { ...todo, done: !todo.done } : todo\n      ),\n    removeTodo: (state, action: PayloadAction<TodoId>) =>\n      state.map(todo =>\n        todo.id === action.payload ? { ...todo, removed: true } : todo\n      ),\n    reviveTodo: (state, action: PayloadAction<TodoId>) =>\n      state.map(todo =>\n        todo.id === action.payload\n          ? { ...todo, done: false, removed: false }\n          : todo\n      ),\n    deleteTodo: (state, action: PayloadAction<TodoId>) =>\n      state.filter(todo => todo.id !== action.payload),\n  },\n});\n\nexport const {\n  reducer: todosReducer,\n  actions: { addTodo, changeTodoStatus, removeTodo, reviveTodo, deleteTodo },\n} = todosSlice;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { v4 } from \"uuid\";\n\nimport { addTodo } from \"../../../store/todos/slice\";\nimport { FormInput } from \"./types\";\n\nexport function AddTodo() {\n  const { register, handleSubmit, setValue, errors } = useForm<FormInput>();\n  const dispatch = useDispatch();\n  return (\n    <>\n      <h2>Add Todo</h2>\n      <form\n        onSubmit={handleSubmit(({ content }: FormInput) => {\n          setValue(\"content\", \"\");\n          dispatch(addTodo({ content, done: false, removed: false, id: v4() }));\n        })}\n      >\n        <label htmlFor=\"content\">Content</label>\n        <input\n          type=\"text\"\n          name=\"content\"\n          ref={register({\n            required: { value: true, message: \"Content cannot be empty\" },\n          })}\n        />\n        {errors.content && <span>{errors.content.message}</span>}\n      </form>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Todo } from \"../../../store/todos/type\";\nimport {\n  reviveTodo,\n  changeTodoStatus,\n  deleteTodo,\n} from \"../../../store/todos/slice\";\nimport { useDispatch } from \"react-redux\";\n\ninterface TodoItemProps {\n  todo: Todo;\n}\n\nexport function TodoItem({\n  todo: { done, content, removed, id },\n}: TodoItemProps) {\n  const dispatch = useDispatch();\n  return (\n    <>\n      {!removed && (\n        <input\n          type=\"checkbox\"\n          checked={done}\n          onClick={() => dispatch(changeTodoStatus(id))}\n        />\n      )}\n      <span>{content}</span>\n      {removed && (\n        <>\n          <button onClick={() => dispatch(reviveTodo(id))}>revive</button>\n          <button onClick={() => dispatch(deleteTodo(id))}>delete</button>\n        </>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { Todo } from \"../../store/todos/type\";\nimport { TodoItem } from \"./todo-item\";\nimport { removeTodo } from \"../../store/todos/slice\";\nimport { useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { HOME_ROUTE } from \"../app/routes\";\n\ninterface TodoListProps {\n  todos: Todo[];\n}\n\nexport function TodoList({ todos }: TodoListProps) {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const removeCompleted = () => {\n    todos.filter(todo => todo.done).map(todo => dispatch(removeTodo(todo.id)));\n  };\n\n  return (\n    <>\n      <h2>Todos</h2>\n      {todos.length > 0 && location.pathname === HOME_ROUTE && (\n        <button onClick={removeCompleted}>remove completed</button>\n      )}\n      {[...todos]\n        .sort((a, b) => (a.done ? 1 : b.done ? -1 : 0))\n        .map(todo => (\n          <TodoItem todo={todo} key={todo.id} />\n        ))}\n    </>\n  );\n}\n","export const REMOVED_ROUTE = \"/removed\";\nexport const HOME_ROUTE = \"/\";\n","import React from \"react\";\nimport { Todo } from \"../../store/todos/type\";\nimport { Store } from \"../../store\";\nimport { useSelector } from \"react-redux\";\nimport { AddTodo } from \"../todo-list/add-todo\";\nimport { TodoList } from \"../todo-list\";\nimport { useLocation, Link, Route } from \"react-router-dom\";\nimport { REMOVED_ROUTE, HOME_ROUTE } from \"./routes\";\n\nfunction App() {\n  const location = useLocation();\n  const todos = useSelector<Store, Todo[]>(state =>\n    state.todos.filter(todo =>\n      location.pathname === REMOVED_ROUTE ? todo.removed : !todo.removed\n    )\n  );\n  return (\n    <>\n      <Link to={HOME_ROUTE}>New Todos</Link>\n      <Link to={REMOVED_ROUTE}>Done Todos</Link>\n      <Route exact path={HOME_ROUTE} component={AddTodo} />\n      <TodoList todos={todos} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { todosReducer } from \"./todos/slice\";\nimport { createBrowserHistory } from \"history\";\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n});\n\nexport type Store = ReturnType<typeof rootReducer>;\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n\nexport const history = createBrowserHistory();\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store, history } from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router history={history}>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}